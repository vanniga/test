/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.CreditCard;
import com.example.model.Fault;
import org.threeten.bp.OffsetDateTime;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-07-30T16:46:59.619Z[GMT]")
@Validated
public interface CreditcardApi {

    @Operation(summary = "Operation to add the card details into the backend system.", description = "Addtion operation for Credit Card system.", tags={ "Credit Card System" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Response body"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request, consumers will get this error if the request does not contain valid headers and inputs. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Fault.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Fault.class))) })
    @RequestMapping(value = "/creditcard",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addCreditCard(@Parameter(in = ParameterIn.HEADER, description = "RequestID is a unique identifier that is unique for a single request/response message and will be used to track consumer's request  through the system. UUID specification (RFC 4122, ITU-T Rec. X.667),used for auditing, and returned in the response. " ,required=true,schema=@Schema()) @RequestHeader(value="RequestID", required=true) String requestID, @Parameter(in = ParameterIn.HEADER, description = "Used to reflect the time when the message was created." ,required=true,schema=@Schema()) @RequestHeader(value="RequestTimestamp", required=false) OffsetDateTime requestTimestamp, @Parameter(in = ParameterIn.HEADER, description = "Identifies the originator System of the Business Process." ,required=true,schema=@Schema()) @RequestHeader(value="OriginatorID", required=true) String originatorID, @Parameter(in = ParameterIn.HEADER, description = "Application ID to identify the applicant." ,required=true,schema=@Schema()) @RequestHeader(value="AppID", required=true) String appID, @Parameter(in = ParameterIn.DEFAULT, description = "Request body for the service request", schema=@Schema()) @Valid @RequestBody CreditCard body);


    @Operation(summary = "", description = "Get all credit cards", tags={ "Credit Card System" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of credit cards", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CreditCard.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Response body"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request, consumers will get this error if the request does not contain valid headers and inputs. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Fault.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Fault.class))) })
    @RequestMapping(value = "/creditcard",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CreditCard>> getAllCreditCards(@Parameter(in = ParameterIn.HEADER, description = "RequestID is a unique identifier that is unique for a single request/response message and will be used to track consumer's request  through the system. UUID specification (RFC 4122, ITU-T Rec. X.667),used for auditing, and returned in the response. " ,required=true,schema=@Schema()) @RequestHeader(value="RequestID", required=true) String requestID, @Parameter(in = ParameterIn.HEADER, description = "Used to reflect the time when the message was created." ,required=true,schema=@Schema()) @RequestHeader(value="RequestTimestamp", required=false) OffsetDateTime requestTimestamp, @Parameter(in = ParameterIn.HEADER, description = "Identifies the originator System of the Business Process." ,required=true,schema=@Schema()) @RequestHeader(value="OriginatorID", required=true) String originatorID, @Parameter(in = ParameterIn.HEADER, description = "Application ID to identify the applicant." ,required=true,schema=@Schema()) @RequestHeader(value="AppID", required=true) String appID);

}

